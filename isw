#!/usr/bin/env python3

import argparse
import configparser
import datetime
import json
import os
import re

EC_IO_FILE = '/dev/ec'
PROFILES = (
    'balanced',
    'performance',
)
FAN_MODES = (
    'auto',
    'basic',
    'advanced',
)
MUX_MODES = (
    'mshybrid',
    'integrated',
    'discrete',
)


class ISW:
    fan_mode_address = 0xf4
    fan_mode_auto = 12
    fan_mode_basic = 76
    fan_mode_advanced = 140

    cooler_boost_address = 152
    cooler_boost_off = 0
    cooler_boost_on = 128

    realtime_cpu_temp_address = 0x68
    realtime_cpu_fan_rpm_address = 0xcc

    realtime_gpu_temp_address = 0x80
    realtime_gpu_fan_rpm_address = 0xca

    def __init__(self, config_path: str | None = None) -> None:
        if not config_path:
            print('No configuration file specified.')
            print('Using limited feature set.')
            print()
            return

        with open(config_path) as config_file:
            config = configparser.ConfigParser()
            config.read_file(config_file)

            if self.bios not in config:
                print(f'Model "{self.bios}" not found in configuration file "{config_path}".')
                print('Using limited feature set.')
                print()
                return

            for key, value in config[self.bios].items():
                if value.isnumeric():
                    value = int(value)
                elif re.match(r'0[xX][0-9a-fA-F]+', value):  # hex to int
                    value = int(value, 16)

                setattr(self, key, value)

    def _write(self, address: int, value: int) -> bytes:
        with open(EC_IO_FILE, 'r+b') as f:
            f.seek(address)
            f.write(bytes((value,)))

    def _read(self, address: int, size: int = 1) -> bytes:
        with open(EC_IO_FILE, 'r+b') as f:
            f.seek(address)
            return f.read(size)

    def _read_rpm(self, address: int, size: int = 1) -> int:
        value = int(self._read(address, 2).hex(), 16)
        if value:
            return 478000 // value
        return value

    @property
    def bios(self) -> str:
        return self._read(0xa0, 8).decode()

    @property
    def user_profile(self) -> str:
        profiles = {
            getattr(self, f'profile_{profile}'): profile for profile in PROFILES
            if hasattr(self, f'profile_{profile}')
        }
        return profiles.get(self._read(self.profile_address)[0]) or 'unknown'

    @user_profile.setter
    def user_profile(self, name: str) -> None:
        if hasattr(self, f'profile_{profile}'):
            value = getattr(self, f'profile_{profile}')
            return self._write(self.profile_address, value)

    @property
    def fan_mode(self) -> str:
        modes = {
            getattr(self, f'fan_mode_{mode}'): mode for mode in FAN_MODES
            if hasattr(self, f'fan_mode_{mode}')
        }
        return modes.get(self._read(self.fan_mode_address)[0]) or 'unknown'

    @fan_mode.setter
    def fan_mode(self, mode: str) -> None:
        if hasattr(self, f'fan_mode_{mode}'):
            value = getattr(self, f'fan_mode_{mode}')
            return self._write(self.fan_mode_address, value)

    @property
    def mux_switch(self) -> str:
        modes = {
            getattr(self, f'mux_{mode}'): mode for mode in MUX_MODES
            if hasattr(self, f'mux_{mode}')
        }
        return modes.get(self._read(self.mux_switch_address)[0]) or 'unknown'

    @mux_switch.setter
    def mux_switch(self, mode: str) -> None:
        if hasattr(self, f'mux_{mode}'):
            value = getattr(self, f'mux_{mode}')
            return self._write(self.mux_switch_address, value)

    @property
    def cooler_boost(self) -> bool | None:
        return {
            self.cooler_boost_on: True,
            self.cooler_boost_off: False,
        }.get(self._read(self.cooler_boost_address)[0])

    @cooler_boost.setter
    def cooler_boost(self, value: bool) -> None:
        return self._write(self.cooler_boost_address, self.cooler_boost_on if value else self.cooler_boost_off)

    @property
    def taillight(self) -> bool | None:
        return self._read(self.tail_light_address)[0] & self.tail_light_mask == self.tail_light_mask

    @taillight.setter
    def taillight(self, value: bool) -> None:
        current_value = self._read(self.tail_light_address)[0]
        if value:
            current_value |= self.tail_light_mask
        else:
            current_value ^= self.tail_light_mask
        return self._write(self.tail_light_address, current_value)

    @property
    def mic_light(self) -> bool:
        return self._read(self.mic_light_address)[0] & self.mic_light_mask == self.mic_light_mask

    @mic_light.setter
    def mic_light(self, value: bool) -> None:
        current_value = self._read(self.mic_light_address)[0]
        if value:
            current_value |= self.mic_light_mask
        else:
            current_value ^= self.mic_light_mask
        return self._write(self.mic_light_address, current_value)

    @property
    def cpu_fan_rpm(self) -> int:
        return self._read_rpm(self.realtime_cpu_fan_rpm_address)

    @property
    def gpu_fan_rpm(self) -> int:
        return self._read_rpm(self.realtime_gpu_fan_rpm_address)

    @property
    def cpu_temp(self) -> int:
        return self._read(self.realtime_cpu_temp_address)[0]

    @property
    def gpu_temp(self) -> int:
        return self._read(self.realtime_gpu_temp_address)[0]

    def get_cpu_fan_speed(self, index: int) -> int:
        return self._read(getattr(self, f'cpu_fan_speed_address_{index}'))[0]

    def set_cpu_fan_speed(self, index: int, speed: int) -> int:
        self._write(getattr(self, f'cpu_fan_speed_address_{index}'), speed)

    def get_gpu_fan_speed(self, index: int) -> int:
        return self._read(getattr(self, f'gpu_fan_speed_address_{index}'))[0]

    def set_gpu_fan_speed(self, index: int, speed: int) -> int:
        self._write(getattr(self, f'gpu_fan_speed_address_{index}'), speed)

    def info(self,) -> None:
        bios_info = self._read(0x000000a0, 28).decode()
        bios = bios_info[:8]
        version = bios_info[9:12]
        date = datetime.datetime.strptime(bios_info[12:], '%m%d%Y%H:%M:%S')
        print(f'BIOS: {bios} {version}')
        print(f'Date: {date.strftime("%Y-%m-%d %H:%M:%S")}')
        if hasattr(self, 'profile_address'):
            print(f'Profile: {self.user_profile}')
        if hasattr(self, 'mux_switch_address'):
            print(f'MUX Switch: {self.mux_switch}')
        print(f'Fan mode: {self.fan_mode}')
        if hasattr(self, 'cooler_boost_address'):
            print(f'Cooler Boost: {self.cooler_boost}')
        if hasattr(self, 'tail_light_address'):
            print(f'Chassis Taillight: {self.taillight}')
        if hasattr(self, 'mic_light_address'):
            print(f'Mic Light: {self.mic_light}')
        print()

        print(f'CPU Temp: {self.cpu_temp}°C')
        print(f'CPU Fan: {self.cpu_fan_rpm} RPM')
        i = 0
        while hasattr(self, f'cpu_fan_speed_address_{i}'):
            print(f'CPU Fan Speed {i}: {self.get_cpu_fan_speed(i)}%')
            i += 1
        print()

        print(f'GPU Temp: {self.gpu_temp}°C')
        print(f'GPU Fan: {self.gpu_fan_rpm} RPM')
        i = 0
        while hasattr(self, f'gpu_fan_speed_address_{i}'):
            print(f'GPU Fan Speed {i}: {self.get_gpu_fan_speed(i)}%')
            i += 1
        print()


class ReadCachedISW(ISW):
    def __init__(self, *args, **kwargs) -> None:
        with open(EC_IO_FILE, 'r+b') as f:
            self.data = f.read()
        super().__init__(*args, **kwargs)

    def _read(self, address: int, size: int = 1) -> bytes:
        return self.data[address:address + size]

    def _write(self, address: int, value: int) -> bytes:
        data = list(self.data)
        data[address] = value
        self.data = bytes(data)
        super()._write(address, value)


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--cooler-boost', type=int, help='Cooler Boost (0/1)')
    parser.add_argument('-u', '--user-profile', type=str, help='User profile (balanced/performance)')
    parser.add_argument('-m', '--fan-mode', type=str, help='Fan mode (auto/basic/advanced)')
    parser.add_argument('-c', '--cpu-fan', type=int, help='CPU fan (0..6)')
    parser.add_argument('-g', '--gpu-fan', type=int, help='GPU fan (0..6)')
    parser.add_argument('-s', '--speed', type=int, help='Fan speed to set in % (should be used with -c or -g)')
    parser.add_argument('-t', '--taillight', type=int, help='Chassis Taillight (0/1)')
    parser.add_argument('-l', '--mic-light', type=int, help='Mic Light (0/1)')
    parser.add_argument('-x', '--mux-switch', type=str, help='MUX Switch (mshybrid/discrete/integrated)')
    parser.add_argument('-f', '--config', type=str, help='Path to config file')
    args = parser.parse_args()

    if not os.path.exists(EC_IO_FILE):
        os.system('modprobe acpi-ec')

    isw = ReadCachedISW(args.config)

    if args.speed is not None:
        if args.cpu_fan is None and args.gpu_fan is None:
            print('No CPU or GPU fan specified.')
            print('Please select CPU or GPU fan with -c or -g.')
            print()
            return
        if args.cpu_fan is not None:
            isw.set_cpu_fan_speed(args.cpu_fan, args.speed)
        if args.gpu_fan is not None:
            isw.set_gpu_fan_speed(args.gpu_fan, args.speed)

    if args.cooler_boost is not None:
        isw.cooler_boost = args.cooler_boost
    if args.user_profile is not None:
        isw.user_profile = args.user_profile
    if args.fan_mode is not None:
        isw.fan_mode = args.fan_mode
    if args.taillight is not None:
        isw.taillight = args.taillight
    if args.mic_light is not None:
        isw.mic_light = args.mic_light
    if args.mux_switch is not None:
        isw.mux_switch = args.mux_switch

    isw.info()


if __name__ == '__main__':
    main()
